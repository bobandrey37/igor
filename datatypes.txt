Quick note of how objects can be represented.

Getting data:

default:
		empty or multi-node nodeset:
			json: []
			xml: empty
			txt: empty
		single node nodeset:
			json: objdumpjson
			xml: objdumpxml
			txt: objtxt
		multi-node nodeset:
			json: ERROR
			xml: ERROR
			txt: all objtext, one per line
		other value:
			json: { "value" : string }
			xml: <value>string</value>
			txt: string
ref:
		json: {"ref" : /data/xpath }
		xml: <ref>/data/xpath</ref>
		txt: /data/xpath
		
multi:
	nodeset
		empty
			json: []
			xml: <items/>
			txt: ERROR
		nonempty
			json: [{"ref":uniquexpath, "value": objdump}, ...]
			xml: <items><item><ref>uniquexpath</ref><value>objdump</value></item></items>
			txt: ERROR
	string
			json: { "value" : string }
			xml: <value>string</value>
			txt: string
	bool
			json: { "value" : bool }
			xml: <value>bool</value>
			txt: bool
	number
			json: { "value" : number }
			xml: <value>number</value>
			txt: number
		

Storing data:

PUT /path/existing
	json {a=42, b=42}
		Replace content of existing with <a>42</a><b>42</b>
	json {existing={a=42, b=42}}
		Replace content of existing with <existing><a>42</a><b>42</b></existing> (CHILD!)
	urlencoded a=42&b=42
		Replace content of existing with <a>42</a><b>42</b>
	text hello
		Replace content of existing with text node "hello"
	xml <existing><a>42</a><b>42</b></existing>
		Replace existing itself with <existing><a>42</a><b>42</b></existing>
	xml <a>42</a>
		ERROR
		
PUT /path/multiexisting
		ERROR
		
PUT /path/new
	json {a=42, b=42}
		Create <new><a>42</a><b>42</b></new>
	json {new={a=42, b=42}}
		Create <new><new><a>42</a><b>42</b></new></new>
	urlencoded a=42&b=42
		Create <new><a>42</a><b>42</b></new>
	text hello
		Create <new>hello</new>
	xml <new><a>42</a><b>42</b></new>
		Create <new><a>42</a><b>42</b></new>
	xml <a>42</a>
		ERROR
		
PUT /path/nonexisting/new
		ERROR
	
POST /path/existing
	json {a=42, b=42}
		Update content of existing with <a>42</a><b>42</b>
	json {existing={a=42, b=42}}
		Update content of existing with <existing><a>42</a><b>42</b></existing> (CHILD!)
	urlencoded a=42&b=42
		Update content of existing with <a>42</a><b>42</b>
	text hello
		ERROR?
	xml <existing><a>42</a><b>42</b></existing>
		ERROR?
	xml <a>42</a>
		ERROR?
POST /path/multiexisting
		ERROR
POST /path/new
		ERROR?
	json {a=42, b=42}
	json {new={a=42, b=42}}
	urlencoded a=42&b=42
	text hello
	xml <new><a>42</a><b>42</b></new>
	xml <a>42</a>
POST /path/nonexisting/new
	ERROR
	
	
Notes on schema in the database.xml file.

sensors	- Raw data from input-only devices and services
	smartmeter - Energy usage. Gotten from P1 port using an RFDuino.
		(read with scripts/pullSmartMeter. Lowlevel scripts for reading the P1 port with Jack's hardware are in dis/jack/smartMeter)
	netAtmo - Temperature and other environment data, from a netAtmo weather station
		(read with scripts/pullNetAtmo, through ReST interface from netatmo.com. Credentials currently hardcoded in script.)
	dhcp - DHCP leases and pingability of hosts on the local subnet.
		(scripts/pullDHCP reads from local logfiles (so bootp server should run on this machine) with dis/jack/home/dhcpleases.py)
	ble - Bluetooth LE devices in range
		(scripts/pullBLE uses http to access server. dis/jack/home/bleServer has code for a server running on port 8081 that maintains a database of BLE device availability)
	fitbit - Weight data for various users, obtained from a FitBit Aria through the fitbit.com ReST API.
		(scripts/pullFitbit uses credentials in /identities/$user/pullFitbit to get the data)
devices - Raw data from devices that can be controlled
	tv - power state, channel and volume of Philips TV
		(scripts/pullPhilips uses dis/jack/bin/philips.py to get the data from the ReST server inside the TV)
	plant - position and state of the movable plant
		(scripts/pullPlant uses ReST access to plant.local ESP8266 stepper motor server. Code and hardware are in dis/jack/esp8266, look for MotorServer)
	lcd - message to be displayed on an LCD display
		(scripts/debugShowLcd uses dis/jack/esp8266/lcdecho.py. Code and hardware are in dis/jack/esp8266, look for DisplayServer)
people - high-level data about individuals (obtained indirectly from the sensors and devices data)
	jack - Data about a user called jack
		(more to be provided)
environment - high-level data about the state of the house (obtained indirectly from the sensors and devices data)
	(more to be provided)
identities - low-level data that can be used to identify/authenticate individuals (or possible household services)
	jack - data for user jack
		bleMAC - Bluetooth LE MAC address of cellphone
		wifiMAC - WiFi MAC address of cellphone
		blePebble - Bluetooth LE MAC address of another device that is personal to this user
		scriptData - per-script settings if the given script is called with argument user=jack
			pullFitbit - OAuth data needed to run pullFitbit script for user jack
(will need a global scriptData here too, to be merged with per-user scriptData)
triggers - Actions to run when a specific XPath is changed
	trigger - One such action
		xpath - The xpath that triggers the action
		url - the URL that will be accessed
			(in the url {xpathexpression} constructs can be used. '.' is the DOM node that triggered the xpath expression)
		method - the method to use on the URL (default GET)
		data - the data to push into the URL (if PUT or POST)
			(again {} constructs are allowed)
		(mimetype for data is missing, and some way to specify credentials)
	(there are triggers to update the triggers themselves, and the periodic calls)
periodics - Actions that should be run periodically
	periodic - one such action
		interval - how often (in seconds) the action should be run
		url - the URL that will be accessed
		method - the method to use on the URL (default GET)
	
